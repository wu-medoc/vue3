{"remainingRequest":"/Users/mei/github/vue3/node_modules/thread-loader/dist/cjs.js!/Users/mei/github/vue3/node_modules/babel-loader/lib/index.js!/Users/mei/github/vue3/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mei/github/vue3/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/mei/github/vue3/src/components/Rendering/ListRendering.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/mei/github/vue3/src/components/Rendering/ListRendering.vue","mtime":1615059674827},{"path":"/Users/mei/github/vue3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mei/github/vue3/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mei/github/vue3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mei/github/vue3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mei/github/vue3/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdMaXN0UmVuZGVyaW5nJywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcGFyZW50TWVzc2FnZTogJ1BhcmVudCcsCiAgICAgIGl0ZW1zOiBbewogICAgICAgIG1lc3NhZ2U6ICdGb28nCiAgICAgIH0sIHsKICAgICAgICBtZXNzYWdlOiAnQmFyJwogICAgICB9XSwKICAgICAgbXlPYmplY3Q6IHsKICAgICAgICB0aXRsZTogJ0hvdyB0byBkbyBsaXN0cyBpbiBWdWUnLAogICAgICAgIGF1dGhvcjogJ0phbmUgRG9lJywKICAgICAgICBwdWJsaXNoZWRBdDogJzIwMjAtMDMtMjInCiAgICAgIH0sCiAgICAgIGNvZGVWZm9yOiAn4pGgPGxpIHYtZm9yPSJpdGVtIGluIGl0ZW1zIj57eyBpdGVtLm1lc3NhZ2UgfX08L2xpPiDikaFkYXRhKCkge3JldHVybiB7aXRlbXM6IFt7IG1lc3NhZ2U6IFwnRm9vXCcgfSwgeyBtZXNzYWdlOiBcJ0JhclwnIH1dfX0nLAogICAgICBjb2RlVmZvcjE6ICfikaA8bGkgdi1mb3I9IihpdGVtLCBpbmRleCkgb2YgaXRlbXMiPnt7IHBhcmVudE1lc3NhZ2UgfX0gLSB7eyBpbmRleCB9fSAtIHt7IGl0ZW0ubWVzc2FnZSB9fTwvbGk+IOKRoWRhdGEoKSB7cmV0dXJuIHtwYXJlbnRNZXNzYWdlOlwnUGFyZW50XCcsIGl0ZW1zOiBbeyBtZXNzYWdlOiBcJ0Zvb1wnIH0sIHsgbWVzc2FnZTogXCdCYXJcJyB9XX19JywKICAgICAgY29kZVZvYmo6ICfikaA8bGkgdi1mb3I9Iih2YWx1ZSwgbmFtZSwgaW5kZXgpIGluIG15T2JqZWN0IiA6a2V5PSJpbmRleCI+e3sgaW5kZXggfX0uIHt7IG5hbWUgfX06IHt7IHZhbHVlIH19PC9saT4g4pGhZGF0YSgpIHtyZXR1cm4geyBteU9iamVjdDoge3RpdGxlOiBcJ0hvdyB0byBkbyBsaXN0cyBpbiBWdWVcJyxhdXRob3I6IFwnSmFuZSBEb2VcJyxwdWJsaXNoZWRBdDogXCcyMDIwLTAzLTIyXCd9fX0nCiAgICB9OwogIH0KfTs="},{"version":3,"sources":["/Users/mei/github/vue3/src/components/Rendering/ListRendering.vue"],"names":[],"mappings":"AA2CA,eAAe;AACb,EAAA,IAAI,EAAE,eADO;AAEb,EAAA,IAFa,kBAEL;AACN,WAAO;AACL,MAAA,aAAa,EAAE,QADV;AAEL,MAAA,KAAK,EAAE,CAAC;AAAE,QAAA,OAAO,EAAE;AAAX,OAAD,EAAqB;AAAE,QAAA,OAAO,EAAE;AAAX,OAArB,CAFF;AAGL,MAAA,QAAQ,EAAE;AACR,QAAA,KAAK,EAAE,wBADC;AAER,QAAA,MAAM,EAAE,UAFA;AAGR,QAAA,WAAW,EAAE;AAHL,OAHL;AAQL,MAAA,QAAQ,EAAE,2HARL;AASL,MAAA,SAAS,EAAE,kMATN;AAUL,MAAA,QAAQ,EAAE;AAVL,KAAP;AAaF;AAhBa,CAAf","sourcesContent":["<template>\n    <div class=\"demo\">\n        <h3>列表渲染</h3>\n        <strong>v-for</strong>\n        <ul id=\"array-rendering\" class=\"disc\">\n            <li v-for=\"item in items\" :key='item'>\n                {{ item.message }}\n            </li>\n        </ul>\n        <p class=\"text-fix\">該v-for指令需要採用形式的特殊語法item in items，其中items是源數據數組，並且item是被進行迭代的數組元素的別名：</p>\n        <div v-text=\"codeVfor\" class=\"codeText\"></div>\n\n        <ul id=\"array-with-index\" class=\"disc\">\n            <li v-for=\"(item, index) of items\" :key='item'>\n                {{ parentMessage }} - {{ index }} - {{ item.message }}\n            </li>\n        </ul>\n        <p class=\"text-fix\">在v-for塊內部，我們可以完全訪問父作用域屬性。v-for還支持另一個參數，用於當前項的索引。</p>\n        <p class=\"text-fix\">也可以將of用作分隔符in，以使其更接近JavaScript的迭代器語法：</p>\n        <div v-text=\"codeVfor1\" class=\"codeText\"></div>\n\n        <ul id=\"v-for-object\" class=\"disc\">\n            <li v-for=\"(value, name, index) in myObject\" :key=\"index\">\n                {{ index }}. {{ name }}: {{ value }}\n            </li>\n        </ul>\n        <p class=\"text-fix\">v-for還可以用於遍歷對象的屬性。並為屬性名稱（又稱鍵）提供第二個參數，另一個用於索引。</p>\n        <p class=\"text-fix\">建議盡可能提供一個key屬性v-for，除非迭代的DOM內容很簡單。</p>\n        <div v-text=\"codeVobj\" class=\"codeText\"></div>\n        <p class=\"text-fix\">Vue封裝了觀察到的數組的變異方法，因此它們也將觸發視圖更新。包裝的方法是：</p>\n        <ul id=\"v-for-object\" class=\"disc\">\n            <li>push()</li>\n            <li>pop()</li>\n            <li>shift()</li>\n            <li>unshift()</li>\n            <li>splice()</li>\n            <li>sort()</li>\n            <li>reverse()</li>\n        </ul>\n        <p class=\"text-fix\">變異方法會變異調用它們的原始數組。相比之下，也有非變異方法，例如filter()，concat()並且slice()，不發生變異原數組，但總是返回一個新的數組。使用非變異方法時，可以將舊數組替換為新數組</p>\n    </div>\n</template>\n<script>\nexport default {\n  name: 'ListRendering',\n  data () {\n    return {\n      parentMessage: 'Parent',\n      items: [{ message: 'Foo' }, { message: 'Bar' }],\n      myObject: {\n        title: 'How to do lists in Vue',\n        author: 'Jane Doe',\n        publishedAt: '2020-03-22'\n      },\n      codeVfor: '①<li v-for=\"item in items\">{{ item.message }}</li> ②data() {return {items: [{ message: \\'Foo\\' }, { message: \\'Bar\\' }]}}',\n      codeVfor1: '①<li v-for=\"(item, index) of items\">{{ parentMessage }} - {{ index }} - {{ item.message }}</li> ②data() {return {parentMessage:\\'Parent\\', items: [{ message: \\'Foo\\' }, { message: \\'Bar\\' }]}}',\n      codeVobj: '①<li v-for=\"(value, name, index) in myObject\" :key=\"index\">{{ index }}. {{ name }}: {{ value }}</li> ②data() {return { myObject: {title: \\'How to do lists in Vue\\',author: \\'Jane Doe\\',publishedAt: \\'2020-03-22\\'}}}'\n\n    }\n  }\n}\n</script>\n"],"sourceRoot":""}]}