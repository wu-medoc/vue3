{"remainingRequest":"/Users/mei/github/vue3/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/mei/github/vue3/src/components/Bindings/FormInput.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/mei/github/vue3/src/components/Bindings/FormInput.vue","mtime":1615059674820},{"path":"/Users/mei/github/vue3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mei/github/vue3/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mei/github/vue3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mei/github/vue3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mei/github/vue3/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRm9ybUlucHV0JywKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIGNvZGVWOiAn4pGgIOKRoScKICAgIH0KICB9Cn0K"},{"version":3,"sources":["/Users/mei/github/vue3/src/components/Bindings/FormInput.vue"],"names":[],"mappings":";AAiEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACb,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;IACN,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACb;EACF;AACF","file":"/Users/mei/github/vue3/src/components/Bindings/FormInput.vue","sourceRoot":"","sourcesContent":["<template>\n    <div class=\"demo\">\n        <h3>表單輸入綁定</h3>\n        <strong>＃基本用法</strong>\n        <p class=\"text-fix\">\n            可以使用v-model指令在表單輸入，文本區域和選擇元素上創建雙向數據綁定。它會根據輸入類型自動選擇更新元素的正確方法。v-model本質上是用於在用戶輸入事件上更新數據的語法糖，並且在某些情況下需要特別注意。\n        </p>\n        <ul class=\"square\">\n            <li>v-model將忽略初始value，checked或selected任何形式的元素中找到的屬性。它將始終將當前活動實例數據視為真相的來源。您應該data在組件選項內的JavaScript端聲明初始值。</li>\n            <li>v-model 內部使用不同的屬性，並為不同的輸入元素發出不同的事件：\n                <ul class=\"disc\">\n                    <li>文本和textarea元素使用value屬性和input事件</li>\n                    <li>複選框和單選按鈕使用checked屬性和change事件</li>\n                    <li>選擇字段value用作道具和change事件</li>\n                </ul>\n            </li>\n            <li>v-model在IME編寫過程中不會更新。如果您也想滿足這些更新，請改用inputevent。</li>\n        </ul>\n        <strong>＃價值綁定</strong>\n        <ul class=\"square\">\n            <li>對於單選，複選框和選擇選項，v-model綁定值通常是靜態字符串（或複選框的布爾值）。但是有時我們可能想將值綁定到當前活動實例上的動態屬性。我們可以v-bind用來實現這一目標。另外，使用v-bind允許我們將輸入值綁定到非字符串值。</li>\n            <li>\n                <div class=\"gray\">&lt;!-- `picked` is a string \"a\" when checked --&gt;</div>\n                &lt;input type=\"radio\" v-model=\"picked\" value=\"a\" /&gt;\n                <div class=\"gray\">&lt;!-- `toggle` is either true or false --&gt;</div>\n                &lt;input type=\"checkbox\" v-model=\"toggle\" /&gt;\n                <div class=\"gray\">&lt;!-- `selected` is a string \"abc\" when the first option is selected --&gt;</div>\n                &lt;select v-model=\"selected\"&gt;<br />\n                &lt;option value=\"abc\"&gt;ABC&lt;/option&gt;<br />\n                &lt;/select&gt;\n            </li>\n            <li>\n                <div class=\"gray\">when checked: vm.toggle === 'yes'<br> when unchecked: vm.toggle === 'no'</div>\n                &lt;input type=\"checkbox\" v-model=\"toggle\" true-value=\"yes\" false-value=\"no\"&gt;\n            </li>\n            <li>\n                <div class=\"gray\">when checked: vm.pick === vm.a</div>\n                &lt;input type=\"radio\" v-model=\"pick\" v-bind:value=\"a\"&gt;\n            </li>\n            <li>\n                <div class=\"gray\">when checked:<br> typeof vm.selected // => 'object'<br>vm.selected.number // => 123</div>\n                &lt;select v-model=\"selected\"&gt;<br />\n                &lt;option :value=\"{ number: 123 }\"&gt;123&lt;/option&gt;\n                &lt;/select&gt;\n            </li>\n        </ul>\n        <strong>＃修飾符</strong>\n        <ul class=\"square\">\n            <li>.lazy\n                <br>默認情況下，v-model在每個input事件之後將輸入與數據同步（如上所述的IME組成除外）。您可以添加lazy修飾符，以在change事件發生後進行同步：\n                <div class=\"gray\">在“change”而不是“input”之後同步</div>\n                &lt;input v-model.lazy=\"msg\" /&gt;\n            </li>\n            <li>.number\n                <br>如果要自動將用戶輸入鍵入為數字，可以將number修飾符添加到v-model託管輸入中：<br>\n                &lt;input v-model.number=\"age\" type=\"number\" /&gt;\n            </li>\n            <li>.trim\n                <br>如果要自動修剪用戶輸入中的空格，可以將trim修飾符添加到您v-model管理的輸入中：<br>\n                &lt;input v-model.trim=\"msg\" /&gt;\n            </li>\n        </ul>\n    </div>\n</template>\n<script>\nexport default {\n  name: 'FormInput',\n  data () {\n    return {\n      codeV: '① ②'\n    }\n  }\n}\n</script>\n<style scoped>\n.gray{\n    color: gray;\n}\n</style>\n"]}]}