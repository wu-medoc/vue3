declare const _default: import("vue").DefineComponent<{
    openDelay: {
        type: NumberConstructor;
        default: number;
    };
    closeDelay: {
        type: NumberConstructor;
        default: number;
    };
    zIndex: NumberConstructor;
    modalFade: {
        type: BooleanConstructor;
        default: boolean;
    };
    modalClass: {
        type: StringConstructor;
        default: string;
    };
    modalAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    modal: {
        type: BooleanConstructor;
        default: boolean;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    showClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickModal: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnPressEscape: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnHashChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        default: boolean;
        type: BooleanConstructor;
    };
    roundButton: {
        default: boolean;
        type: BooleanConstructor;
    };
}, {
    hasMessage: import("vue").ComputedRef<boolean>;
    icon: import("vue").ComputedRef<string>;
    confirmButtonClasses: import("vue").ComputedRef<string>;
    handleWrapperClick: () => void;
    handleInputEnter: () => void;
    handleAction: (action: any) => void;
    handleClose: () => void;
    t: (path: string, option?: any) => string;
    doClose: () => void;
    uid: import("vue").Ref<number>;
    title: any;
    message: import("vue").Ref<string>;
    type: import("vue").Ref<string>;
    iconClass: import("vue").Ref<string>;
    customClass: import("vue").Ref<string>;
    showInput: import("vue").Ref<boolean>;
    inputValue: any;
    inputPlaceholder: import("vue").Ref<string>;
    inputType: import("vue").Ref<string>;
    inputPattern: any;
    inputValidator: any;
    inputErrorMessage: import("vue").Ref<string>;
    showConfirmButton: import("vue").Ref<boolean>;
    showCancelButton: import("vue").Ref<boolean>;
    action: import("vue").Ref<string>;
    confirmButtonText: import("vue").Ref<string>;
    cancelButtonText: import("vue").Ref<string>;
    confirmButtonLoading: import("vue").Ref<boolean>;
    cancelButtonLoading: import("vue").Ref<boolean>;
    confirmButtonClass: import("vue").Ref<string>;
    confirmButtonDisabled: import("vue").Ref<boolean>;
    cancelButtonClass: import("vue").Ref<string>;
    editorErrorMessage: any;
    callback: any;
    dangerouslyUseHTMLString: import("vue").Ref<boolean>;
    focusAfterClosed: any;
    isOnComposition: import("vue").Ref<boolean>;
    distinguishCancelAndClose: import("vue").Ref<boolean>;
    type$: import("vue").Ref<string>;
    visible: import("vue").Ref<boolean>;
    validateError: import("vue").Ref<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    openDelay: number;
    closeDelay: number;
    modalFade: boolean;
    modalClass: string;
    modalAppendToBody: boolean;
    modal: boolean;
    lockScroll: boolean;
    showClose: boolean;
    closeOnClickModal: boolean;
    closeOnPressEscape: boolean;
    closeOnHashChange: boolean;
    center: boolean;
    roundButton: boolean;
} & {
    zIndex?: number;
}>, {
    openDelay: number;
    closeDelay: number;
    modalFade: boolean;
    modalClass: string;
    modalAppendToBody: boolean;
    modal: boolean;
    lockScroll: boolean;
    showClose: boolean;
    closeOnClickModal: boolean;
    closeOnPressEscape: boolean;
    closeOnHashChange: boolean;
    center: boolean;
    roundButton: boolean;
}>;
export default _default;
